//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/!Tiroketa/Resources/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""InputGameplay"",
            ""id"": ""4e34442e-d2ea-49e2-af31-dd902f6516ea"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""eb64ea1a-5e21-4f52-8d07-565ff4c9bfb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""attack"",
                    ""type"": ""Button"",
                    ""id"": ""967c31ed-f881-4424-bd91-8912b882bc34"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""keybord"",
                    ""id"": ""b3680739-c6ad-4e82-99d9-4363dc1c2eff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""371827e9-d6dd-4734-80b9-702d80bc0377"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""df3ed66d-acf6-4200-8300-69777bf03c76"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""35568216-b8dd-4c4f-b63b-dc3ffed25522"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5f2fa739-974e-46c7-8e6b-5e7acfa8d203"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f95927db-8e66-437d-a38c-9749ea85af97"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputGameplay
        m_InputGameplay = asset.FindActionMap("InputGameplay", throwIfNotFound: true);
        m_InputGameplay_move = m_InputGameplay.FindAction("move", throwIfNotFound: true);
        m_InputGameplay_attack = m_InputGameplay.FindAction("attack", throwIfNotFound: true);
    }

    ~@InputSystem()
    {
        UnityEngine.Debug.Assert(!m_InputGameplay.enabled, "This will cause a leak and performance issues, InputSystem.InputGameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputGameplay
    private readonly InputActionMap m_InputGameplay;
    private List<IInputGameplayActions> m_InputGameplayActionsCallbackInterfaces = new List<IInputGameplayActions>();
    private readonly InputAction m_InputGameplay_move;
    private readonly InputAction m_InputGameplay_attack;
    public struct InputGameplayActions
    {
        private @InputSystem m_Wrapper;
        public InputGameplayActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_InputGameplay_move;
        public InputAction @attack => m_Wrapper.m_InputGameplay_attack;
        public InputActionMap Get() { return m_Wrapper.m_InputGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IInputGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_InputGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputGameplayActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @attack.started += instance.OnAttack;
            @attack.performed += instance.OnAttack;
            @attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IInputGameplayActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @attack.started -= instance.OnAttack;
            @attack.performed -= instance.OnAttack;
            @attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IInputGameplayActions instance)
        {
            if (m_Wrapper.m_InputGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_InputGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputGameplayActions @InputGameplay => new InputGameplayActions(this);
    public interface IInputGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
